From 8d8c4af36d1203197f0137660c1ebc476526f3ac Mon Sep 17 00:00:00 2001
From: Jens John <jens.o.john@gmail.com>
Date: Fri, 24 May 2013 13:24:10 +0200
Subject: [PATCH 1/1] dwm_mpd(), dwm_mpd_cleanup() and variables

---
 config.mk |    7 +++--
 dwm.c     |   86 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 91 insertions(+), 2 deletions(-)

diff --git a/config.mk b/config.mk
index bc3d80e..d4cd44b 100644
--- a/config.mk
+++ b/config.mk
@@ -14,12 +14,15 @@ X11LIB = /usr/X11R6/lib
 XINERAMALIBS  = -lXinerama
 XINERAMAFLAGS = -DXINERAMA
 
+# dwm_mpd() dependencies
+MPDLIBS = -lmpdclient
+
 # includes and libs
 INCS = -I${X11INC}
-LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS}
+LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${MPDLIBS}
 
 # flags
-CPPFLAGS = -D_BSD_SOURCE -D_POSIX_C_SOURCE=2 -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
+CPPFLAGS = -D_BSD_SOURCE -D_POSIX_C_SOURCE=2 -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS} 
 #CFLAGS   = -g -std=c99 -pedantic -Wall -O0 ${INCS} ${CPPFLAGS}
 CFLAGS   = -std=c99 -pedantic -Wall -Wno-deprecated-declarations -Os ${INCS} ${CPPFLAGS}
 LDFLAGS  = -s ${LIBS}
diff --git a/dwm.c b/dwm.c
index 7941bd1..5b5b0e8 100644
--- a/dwm.c
+++ b/dwm.c
@@ -30,6 +30,7 @@
 #include <unistd.h>
 #include <sys/types.h>
 #include <sys/wait.h>
+#include <mpd/client.h>
 #include <X11/cursorfont.h>
 #include <X11/keysym.h>
 #include <X11/Xatom.h>
@@ -65,6 +66,8 @@ enum { NetSupported, NetWMName, NetWMState,
 enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; /* default atoms */
 enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
        ClkClientWin, ClkRootWin, ClkLast };             /* clicks */
+enum { MpdToggle, MpdPrev, MpdNext, MpdLowerVolume,
+       MpdRaiseVolume, MpdMuteVolume };                 /* dwm_mpd() verbs */
 
 typedef union {
 	int i;
@@ -155,6 +158,8 @@ typedef struct {
 	int monitor;
 } Rule;
 
+typedef struct mpd_connection MpdConnection;
+
 /* function declarations */
 static void applyrules(Client *c);
 static Bool applysizehints(Client *c, int *x, int *y, int *w, int *h, Bool interact);
@@ -252,6 +257,8 @@ static int xerror(Display *dpy, XErrorEvent *ee);
 static int xerrordummy(Display *dpy, XErrorEvent *ee);
 static int xerrorstart(Display *dpy, XErrorEvent *ee);
 static void zoom(const Arg *arg);
+static void dwm_mpd(const Arg *arg);
+static void dwm_mpd_cleanup(void);
 
 /* variables */
 static const char broken[] = "broken";
@@ -284,6 +291,9 @@ static Display *dpy;
 static DC dc;
 static Monitor *mons = NULL, *selmon = NULL;
 static Window root;
+static MpdConnection *mpdc = NULL;
+static int dwm_mpd_unmute2vol = 0;
+static int dwm_mpd_voldelta = 4;
 
 /* configuration, allows nested code to access above variables */
 #include "config.h"
@@ -498,6 +508,7 @@ cleanup(void) {
 	XFreeCursor(dpy, cursor[CurMove]);
 	while(mons)
 		cleanupmon(mons);
+    dwm_mpd_cleanup();
 	XSync(dpy, False);
 	XSetInputFocus(dpy, PointerRoot, RevertToPointerRoot, CurrentTime);
 	XDeleteProperty(dpy, root, netatom[NetActiveWindow]);
@@ -2154,6 +2165,81 @@ zoom(const Arg *arg) {
 	pop(c);
 }
 
+void
+dwm_mpd(const Arg *arg) {
+    if(mpdc == NULL)
+            if((mpdc = mpd_connection_new("127.0.0.1", 6600, 0)) != NULL) {
+                if(mpd_connection_get_error(mpdc) != MPD_ERROR_SUCCESS) {
+                    mpd_connection_free(mpdc);
+                    mpdc = NULL;
+                    return;
+                } else
+                    goto MPDCMD_PROCEED;
+            }
+        if(mpd_connection_get_error(mpdc) != MPD_ERROR_SUCCESS) {
+            mpd_connection_free(mpdc);
+            mpdc = NULL;
+            return;
+        }
+
+    MPDCMD_PROCEED:
+        switch(arg->i) {
+            case MpdToggle:
+                {
+                    struct mpd_status *s = mpd_run_status(mpdc);
+                    if(s == NULL) return;
+                    if(mpd_status_get_state(s) == MPD_STATE_PLAY)
+                        mpd_run_pause(mpdc, true);
+                    else
+                        mpd_run_play(mpdc);
+                    mpd_status_free(s);
+                }
+                break;
+            case MpdPrev:
+                mpd_run_previous(mpdc);
+                break;
+            case MpdNext:
+                mpd_run_next(mpdc);
+                break;
+            case MpdMuteVolume:
+            case MpdLowerVolume:
+            case MpdRaiseVolume:
+                {
+                    struct mpd_status *s = mpd_run_status(mpdc);
+                    int vol;
+                    if(s == NULL) return;
+                    vol = mpd_status_get_volume(s);
+                    switch(arg->i) {
+                        case MpdLowerVolume:
+                            vol -= dwm_mpd_voldelta;
+                            if(vol < 0) vol = 0;
+                            break;
+                        case MpdRaiseVolume:
+                            vol += dwm_mpd_voldelta;
+                            if(vol > 100) vol = 100;
+                            break;
+                        case MpdMuteVolume:
+                            if(dwm_mpd_unmute2vol != 0) {
+                                vol = dwm_mpd_unmute2vol;
+                                dwm_mpd_unmute2vol = 0;
+                            } else {
+                                dwm_mpd_unmute2vol = vol;
+                                vol = 0;
+                            }
+                            break;
+                    }
+                    mpd_run_set_volume(mpdc, vol);
+                    mpd_status_free(s);
+                }
+                break;
+        }
+}
+
+void
+dwm_mpd_cleanup(void) {
+    if(mpdc != NULL) mpd_connection_free(mpdc);
+}
+
 int
 main(int argc, char *argv[]) {
 	if(argc == 2 && !strcmp("-v", argv[1]))
-- 
1.7.10.4

